const router = require('express').Router();

exports.router = router;

const { businesses } = require('./businesses');
const { reviews } = require('./reviews');
const { photos } = require('./photos');

const { User } = require('../lib/database')


const userSchema = {
  email: { required: true },
  password: { required: true },
  admin: { required: false },
};


/*
 * Route to list all of a user's businesses.
 */
router.get('/:userid/businesses', function (req, res) {
  const userid = parseInt(req.params.userid);
  const userBusinesses = businesses.filter(business => business && business.ownerid === userid);
  res.status(200).json({
    businesses: userBusinesses
  });
});

/*
 * Route to list all of a user's reviews.
 */
router.get('/:userid/reviews', function (req, res) {
  const userid = parseInt(req.params.userid);
  const userReviews = reviews.filter(review => review && review.userid === userid);
  res.status(200).json({
    reviews: userReviews
  });
});

/*
 * Route to list all of a user's photos.
 */
router.get('/:userid/photos', function (req, res) {
  const userid = parseInt(req.params.userid);
  const userPhotos = photos.filter(photo => photo && photo.userid === userid);
  res.status(200).json({
    photos: userPhotos
  });
});


router.post('/', async function (req, res, next) {
  //check if valid
  if (validateAgainstSchema(req.body, userSchema)) {
    const user = extractValidFields(req.body, userSchema);
    console.log("reaching inside validate")

    //then check if user already exists here

    // const userReviewedThisBusinessAlready = reviews.some(
    //   existingReview => existingReview
    //     && existingReview.ownerid === review.ownerid
    //     && existingReview.businessid === review.businessid
    // ); //add logic for confirming user ownership
    const tempUser = new User(user);
    ///unecessary due to autogenerated ids///
    // tempReview.id = await Review.countDocuments()
    await tempUser.save();
    /// console.log(await Review.countDocuments())

    res.status(201).json({
      id: tempUser.id,
      // links: {
      //   review: `/users/${tempUser.id}`,
      //   business: `/businesses/${tempReview.businessid}`
      // }
    });

  } else {
    res.status(400).json({
      error: "Request body is not a valid business object"
    });
  }
});


router.post('/login', async function (req, res, next) {
  //check if valid
  if (validateAgainstSchema(req.body, userSchema)) {
    const user = extractValidFields(req.body, userSchema);
    console.log("reaching inside validate")


    const tempUser = new User(user);

    await tempUser.save();

    res.status(201).json({
      id: tempUser.id
    });

  } else {
    res.status(400).json({
      error: "Request body is not a valid business object"
    });
  }
});